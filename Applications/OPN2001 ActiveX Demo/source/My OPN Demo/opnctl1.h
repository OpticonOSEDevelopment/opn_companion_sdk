#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// COpnctl1 wrapper class

class COpnctl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(COpnctl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x5AECA121, 0xF70C, 0x494C, { 0xB5, 0xBE, 0xB0, 0xFA, 0x74, 0x3F, 0xCB, 0xD9 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// IopnCtl

// Functions
//

	void init(long COMPort, long * Result)
	{
		static BYTE parms[] = VTS_I4 VTS_PI4 ;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, COMPort, Result);
	}
	void cleanUp(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void getTimeCmd(unsigned char * TimeBuffer, long * Result)
	{
		static BYTE parms[] = VTS_PUI1 VTS_PI4 ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TimeBuffer, Result);
	}
	void setTimeCmd(unsigned char * TimeBuffer, long * Result)
	{
		static BYTE parms[] = VTS_PUI1 VTS_PI4 ;
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TimeBuffer, Result);
	}
	void interrogateCmd(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void powerDownCmd(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void clearDataCmd(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void setDefaultsCmd(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void getParamCmd(long Param, signed char * ParamValue, long ParamValueLength, long * Result)
	{
		static BYTE parms[] = VTS_I4 VTS_PI1 VTS_I4 VTS_PI4 ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Param, ParamValue, ParamValueLength, Result);
	}
	void setParamCmd(long Param, signed char * ParamValue, long ParamValueLength, long * Result)
	{
		static BYTE parms[] = VTS_I4 VTS_PI1 VTS_I4 VTS_PI4 ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Param, ParamValue, ParamValueLength, Result);
	}
	void isDataAvailable(long * DataAvailable, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DataAvailable, Result);
	}
	void readData(long * NumberOfCodes, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, NumberOfCodes, Result);
	}
	void readRawData(signed char * ReadBuffer, long * ReadBufferLength, long * Result)
	{
		static BYTE parms[] = VTS_PI1 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ReadBuffer, ReadBufferLength, Result);
	}
	void getBarcode(signed char * BarcodeData, long BarcodeNumber, long * BarcodeDataLength, long * Result)
	{
		static BYTE parms[] = VTS_PI1 VTS_I4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, BarcodeData, BarcodeNumber, BarcodeDataLength, Result);
	}
	void startPolling(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void stopPolling(long * Result)
	{
		static BYTE parms[] = VTS_PI4 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Result);
	}
	void getCTS(long * CTS, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CTS, Result);
	}
	void getDTR(long * DTR, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DTR, Result);
	}
	void setDTR(long DTR, long * Result)
	{
		static BYTE parms[] = VTS_I4 VTS_PI4 ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DTR, Result);
	}
	void getProtocolVersion(long * PV, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PV, Result);
	}
	void getDeviceID(signed char * DevID, long * DevIDLength, long * Result)
	{
		static BYTE parms[] = VTS_PI1 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DevID, DevIDLength, Result);
	}
	void getSystemStatus(long * SysStat, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SysStat, Result);
	}
	void getSoftwareVersion(signed char * SV, long * SVLength, long * Result)
	{
		static BYTE parms[] = VTS_PI1 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SV, SVLength, Result);
	}
	void getRetryCount(long * Retries, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Retries, Result);
	}
	void setRetryCount(long Retries, long * Result)
	{
		static BYTE parms[] = VTS_I4 VTS_PI4 ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Retries, Result);
	}
	void getCodeType(signed char * CodeName, long CodeNameLength, unsigned char CodeID, long * Result)
	{
		static BYTE parms[] = VTS_PI1 VTS_I4 VTS_UI1 VTS_PI4 ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CodeName, CodeNameLength, CodeID, Result);
	}
	void getASCIIMode(long * AM, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, AM, Result);
	}
	void getRTCMode(long * RTC, long * Result)
	{
		static BYTE parms[] = VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, RTC, Result);
	}
	void timeStamp2String(signed char * TimeString, long TimeStringLength, unsigned char * TimeStamp, long * Result)
	{
		static BYTE parms[] = VTS_PI1 VTS_I4 VTS_PUI1 VTS_PI4 ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, TimeString, TimeStringLength, TimeStamp, Result);
	}
	void getDLLVersion(signed char * dllVersion, long maxLength)
	{
		static BYTE parms[] = VTS_PI1 VTS_I4 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, dllVersion, maxLength);
	}

// Properties
//



};
